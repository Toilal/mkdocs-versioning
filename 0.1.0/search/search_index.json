{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to mkdocs-versioning \u00b6 mkdocs-versioning is a plugin for mkdocs , a tool designed to create static websites usually for generating project documentation. mkdocs-versioning extends mkdocs by differentiating between different versions of documentation you may build. For example, a newer versions of some software may work differently from an older version and it is important that users of an older version of the software reads the appropriate version of the documentation in order to ensure that the user has the correct information and uses the software appropriately. How does it work \u00b6 It works by letting mkdocs build the site normally but builds it into a folder representing the version the software is assigned (e.g. version 1.0.0 of the software will be built into a folder labelled 1.0.0 ). The building of the docs is slightly different than usual as there will be a nav item in mkdocs.yml called Version: \u2018../\u2019 . Clicking this will cause the web browser to move up a directory which will contain an automatically generated page (built using mkdocs) with links to all the other versions of the documentation built. The directory structure will look something like this: Example \u251c\u2500\u2500 1.0.0 \u2502 \u251c\u2500\u2500 404.html \u2502 \u251c\u2500\u2500 assets \u2502 \u251c\u2500\u2500 circle \u2502 \u251c\u2500\u2500 index.html \u2502 \u251c\u2500\u2500 search \u2502 \u251c\u2500\u2500 sitemap.xml \u2502 \u2514\u2500\u2500 sitemap.xml.gz \u251c\u2500\u2500 1.1.0 \u2502 \u251c\u2500\u2500 404.html \u2502 \u251c\u2500\u2500 assets \u2502 \u251c\u2500\u2500 circle \u2502 \u251c\u2500\u2500 index.html \u2502 \u251c\u2500\u2500 search \u2502 \u251c\u2500\u2500 sitemap.xml \u2502 \u251c\u2500\u2500 sitemap.xml.gz \u2502 \u2514\u2500\u2500 triangle \u251c\u2500\u2500 2.0.0 \u2502 \u251c\u2500\u2500 404.html \u2502 \u251c\u2500\u2500 assets \u2502 \u251c\u2500\u2500 circle \u2502 \u251c\u2500\u2500 index.html \u2502 \u251c\u2500\u2500 quadrilateral \u2502 \u251c\u2500\u2500 search \u2502 \u251c\u2500\u2500 sitemap.xml \u2502 \u251c\u2500\u2500 sitemap.xml.gz \u2502 \u2514\u2500\u2500 triangle \u251c\u2500\u2500 404.html \u251c\u2500\u2500 assets \u2502 \u251c\u2500\u2500 fonts \u2502 \u251c\u2500\u2500 images \u2502 \u251c\u2500\u2500 javascripts \u2502 \u2514\u2500\u2500 stylesheets \u251c\u2500\u2500 index.html [1] \u251c\u2500\u2500 search \u2502 \u2514\u2500\u2500 search_index.json \u251c\u2500\u2500 sitemap.xml \u2514\u2500\u2500 sitemap.xml.gz This will generate a version selection page with links to version 1.0.0 , 1.1.0 and 2.0.0 of software documentation. An example version of a built site can be found here Note [1] (the index page in the example above) will contain a single page with links to all versions of the docs that you have built and likewise, all docs that you have built will have link a link to [1]","title":"Home"},{"location":"#welcome-to-mkdocs-versioning","text":"mkdocs-versioning is a plugin for mkdocs , a tool designed to create static websites usually for generating project documentation. mkdocs-versioning extends mkdocs by differentiating between different versions of documentation you may build. For example, a newer versions of some software may work differently from an older version and it is important that users of an older version of the software reads the appropriate version of the documentation in order to ensure that the user has the correct information and uses the software appropriately.","title":"Welcome to mkdocs-versioning"},{"location":"#how-does-it-work","text":"It works by letting mkdocs build the site normally but builds it into a folder representing the version the software is assigned (e.g. version 1.0.0 of the software will be built into a folder labelled 1.0.0 ). The building of the docs is slightly different than usual as there will be a nav item in mkdocs.yml called Version: \u2018../\u2019 . Clicking this will cause the web browser to move up a directory which will contain an automatically generated page (built using mkdocs) with links to all the other versions of the documentation built. The directory structure will look something like this: Example \u251c\u2500\u2500 1.0.0 \u2502 \u251c\u2500\u2500 404.html \u2502 \u251c\u2500\u2500 assets \u2502 \u251c\u2500\u2500 circle \u2502 \u251c\u2500\u2500 index.html \u2502 \u251c\u2500\u2500 search \u2502 \u251c\u2500\u2500 sitemap.xml \u2502 \u2514\u2500\u2500 sitemap.xml.gz \u251c\u2500\u2500 1.1.0 \u2502 \u251c\u2500\u2500 404.html \u2502 \u251c\u2500\u2500 assets \u2502 \u251c\u2500\u2500 circle \u2502 \u251c\u2500\u2500 index.html \u2502 \u251c\u2500\u2500 search \u2502 \u251c\u2500\u2500 sitemap.xml \u2502 \u251c\u2500\u2500 sitemap.xml.gz \u2502 \u2514\u2500\u2500 triangle \u251c\u2500\u2500 2.0.0 \u2502 \u251c\u2500\u2500 404.html \u2502 \u251c\u2500\u2500 assets \u2502 \u251c\u2500\u2500 circle \u2502 \u251c\u2500\u2500 index.html \u2502 \u251c\u2500\u2500 quadrilateral \u2502 \u251c\u2500\u2500 search \u2502 \u251c\u2500\u2500 sitemap.xml \u2502 \u251c\u2500\u2500 sitemap.xml.gz \u2502 \u2514\u2500\u2500 triangle \u251c\u2500\u2500 404.html \u251c\u2500\u2500 assets \u2502 \u251c\u2500\u2500 fonts \u2502 \u251c\u2500\u2500 images \u2502 \u251c\u2500\u2500 javascripts \u2502 \u2514\u2500\u2500 stylesheets \u251c\u2500\u2500 index.html [1] \u251c\u2500\u2500 search \u2502 \u2514\u2500\u2500 search_index.json \u251c\u2500\u2500 sitemap.xml \u2514\u2500\u2500 sitemap.xml.gz This will generate a version selection page with links to version 1.0.0 , 1.1.0 and 2.0.0 of software documentation. An example version of a built site can be found here Note [1] (the index page in the example above) will contain a single page with links to all versions of the docs that you have built and likewise, all docs that you have built will have link a link to [1]","title":"How does it work"},{"location":"CLI commands/","text":"CLI commnads \u00b6 There are a few CLI commands available. Documentation can be found here as well as through the CLI by running mkdocs-versioning -h Deploy \u00b6 mkdocs-versioning deploy Used to deploy already built docs to Github Pages . Note that the docs will need to have already been built and the command must be executed in the same directory as mkdocs.yml Sync \u00b6 mkdocs-versioning sync Used to sync the built docs from gh-pages into the site folder. Primarily used to address incorrect version numbers showing . Note that the command must be executed in the same directory as mkdocs.yml and will copy EVERYTHING in the gh-pages branch into the site folder","title":"CLI Commands"},{"location":"CLI commands/#cli-commnads","text":"There are a few CLI commands available. Documentation can be found here as well as through the CLI by running mkdocs-versioning -h","title":"CLI commnads"},{"location":"CLI commands/#deploy","text":"mkdocs-versioning deploy Used to deploy already built docs to Github Pages . Note that the docs will need to have already been built and the command must be executed in the same directory as mkdocs.yml","title":"Deploy"},{"location":"CLI commands/#sync","text":"mkdocs-versioning sync Used to sync the built docs from gh-pages into the site folder. Primarily used to address incorrect version numbers showing . Note that the command must be executed in the same directory as mkdocs.yml and will copy EVERYTHING in the gh-pages branch into the site folder","title":"Sync"},{"location":"Getting Started/","text":"Getting Started \u00b6 Installing mkdocs-versioning \u00b6 The install is very similar to a standard mkdocs project. The first step is to install mkdocs as well as mkdocs-versioning using pip: pip install mkdocs pip install mkdocs-versioning Next step is to initialise a new mkdocs project. In the root of your project: mkdocs new . This should generate a mkdocs.yml file as well as a folder called docs Setting up mkdocs.yml \u00b6 Your mkdocs.yml file will be slightly different than normal. The key differences are The need to register the mkdocs-versioning plugin Add the version number as a config option for the plugin. Recommend following Semantic Versioning Change the edit_uri . This is because that the edit uri will point to the latest version of the source file mentioned in mkdocs.yml not the version of the page specific to the version of the doc you are in. For example, if you were in version 1.0.0 of a page and the next version of your doc is version 1.1.0 . Using the automatically generated edit uri will take you to the version 1.1.0 of the doc not version 1.0.0 Adding Version: \u2018../\u2019 to the nav A sample config is available below to simply copy-paste into mkdocs.yml : site_name: mkdocs-versioning repo_url: <URL GOES HERE> repo_name: <USERNAME/REPOSITORY_NAME> edit_uri: '' plugins: - mkdocs-versioning: version: <VERSION NUMBER GOES HERE> nav: - Home : 'index.md' - Nav item: 'file_name.md' - Version: '../' Important the Version: '../' nav item is crucial. failure to add it to the nav means that there is no easy way to navigate to the version selection page apart from manually navigating to the URL (which is as simple as removing the version number) You then write the docs as normal and when you have finished, simply run the build command mkdocs build . You can preview the docs using mkdocs serve Note While serving, the version page will NOT be built. to view the version page, you will need to build the docs. You can then serve the built docs using built in python http server # for python 2 python - m SimpleHTTPServer # for python 3 python3 - m http . server Common Errors \u00b6 Rebuilding previously built docs \u00b6 If you are trying to rebuild a version of the docs that has already been built, mkdocs will NOT overwrite it. This is because you should not have to be rebuilding a previous version of the doc; rather, all changes should be reflected in a new version of the software and ideally, should be following Semantic Versioning . However, should you need to rebuild previous versions of your documentation (for example, spelling mistakes or missing documentation), simply deleting the directory will do (if you need to rebuild version 1.3.0 , delete the folder labeled 1.3.0 ). Correct version numbers not showing in the version selection page \u00b6 The version selection page depends on the built docs found in the site directory, specifically the names of the folders. This could result in missing/incorrect documentation versions in the version selection page. One reason for this is that the built docs are generally stored somewhere else (e.g. gh-pages branch) and source file (both code and .md files) are stored in the master branch. This means that you mau not have the built docs which are required for building the versions page correctly. One way to mitigate this is by using the sync command which will sync the gh-pages branch to your local machine. Run this before you work on your next documentation will ensure that all the docs you have previously built will be synced to your local machine so that when you run mkdocs build , the versions page will be built correctly What if documentation is not stored in gh-pages branch \u00b6 You will then need to manually sync FROM where the docs are built TO the directory where built docs are saved (usually the site directory).","title":"Getting Started"},{"location":"Getting Started/#getting-started","text":"","title":"Getting Started"},{"location":"Getting Started/#installing-mkdocs-versioning","text":"The install is very similar to a standard mkdocs project. The first step is to install mkdocs as well as mkdocs-versioning using pip: pip install mkdocs pip install mkdocs-versioning Next step is to initialise a new mkdocs project. In the root of your project: mkdocs new . This should generate a mkdocs.yml file as well as a folder called docs","title":"Installing mkdocs-versioning"},{"location":"Getting Started/#setting-up-mkdocsyml","text":"Your mkdocs.yml file will be slightly different than normal. The key differences are The need to register the mkdocs-versioning plugin Add the version number as a config option for the plugin. Recommend following Semantic Versioning Change the edit_uri . This is because that the edit uri will point to the latest version of the source file mentioned in mkdocs.yml not the version of the page specific to the version of the doc you are in. For example, if you were in version 1.0.0 of a page and the next version of your doc is version 1.1.0 . Using the automatically generated edit uri will take you to the version 1.1.0 of the doc not version 1.0.0 Adding Version: \u2018../\u2019 to the nav A sample config is available below to simply copy-paste into mkdocs.yml : site_name: mkdocs-versioning repo_url: <URL GOES HERE> repo_name: <USERNAME/REPOSITORY_NAME> edit_uri: '' plugins: - mkdocs-versioning: version: <VERSION NUMBER GOES HERE> nav: - Home : 'index.md' - Nav item: 'file_name.md' - Version: '../' Important the Version: '../' nav item is crucial. failure to add it to the nav means that there is no easy way to navigate to the version selection page apart from manually navigating to the URL (which is as simple as removing the version number) You then write the docs as normal and when you have finished, simply run the build command mkdocs build . You can preview the docs using mkdocs serve Note While serving, the version page will NOT be built. to view the version page, you will need to build the docs. You can then serve the built docs using built in python http server # for python 2 python - m SimpleHTTPServer # for python 3 python3 - m http . server","title":"Setting up mkdocs.yml"},{"location":"Getting Started/#common-errors","text":"","title":"Common Errors"},{"location":"Getting Started/#rebuilding-previously-built-docs","text":"If you are trying to rebuild a version of the docs that has already been built, mkdocs will NOT overwrite it. This is because you should not have to be rebuilding a previous version of the doc; rather, all changes should be reflected in a new version of the software and ideally, should be following Semantic Versioning . However, should you need to rebuild previous versions of your documentation (for example, spelling mistakes or missing documentation), simply deleting the directory will do (if you need to rebuild version 1.3.0 , delete the folder labeled 1.3.0 ).","title":"Rebuilding previously built docs"},{"location":"Getting Started/#correct-version-numbers-not-showing-in-the-version-selection-page","text":"The version selection page depends on the built docs found in the site directory, specifically the names of the folders. This could result in missing/incorrect documentation versions in the version selection page. One reason for this is that the built docs are generally stored somewhere else (e.g. gh-pages branch) and source file (both code and .md files) are stored in the master branch. This means that you mau not have the built docs which are required for building the versions page correctly. One way to mitigate this is by using the sync command which will sync the gh-pages branch to your local machine. Run this before you work on your next documentation will ensure that all the docs you have previously built will be synced to your local machine so that when you run mkdocs build , the versions page will be built correctly","title":"Correct version numbers not showing in the version selection page"},{"location":"Getting Started/#what-if-documentation-is-not-stored-in-gh-pages-branch","text":"You will then need to manually sync FROM where the docs are built TO the directory where built docs are saved (usually the site directory).","title":"What if documentation is not stored in gh-pages branch"}]}